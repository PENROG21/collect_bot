from typing import List, Union
import telebot
from telebot import types
import pandas as pd
import os

from data_base import PostgresConnection

# –≤–≤–æ–¥–∏–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
bot = telebot.TeleBot("7716080556:AAHJN8nkSiiEwYNnXR9DTm9JSetyi-PoKrc")

db = PostgresConnection(
    database="telebot",
    password="PENROG21"
)
db.connect()
user_data = {}


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id,
                     f"üéâ –ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}! "
                     f"\n\n–≠—Ç–æ collect - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. \n"
                     "–ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö —Å–ø–∏—Å–∫–æ–≤ –Ω–∞ –±—É–º–∞–≥–µ! –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –∏ –¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–πü§©.\n"
                     "–î–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–µ IDüòâ.\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è "
                     "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ /help")

    markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    item1 = telebot.types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É")
    item2 = telebot.types.KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ —Ç–∞–±–ª–∏—Ü—É")
    item3 = telebot.types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ —Ç–∞–±–ª–∏—Ü—ã")
    item4 = telebot.types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–¥–µ —è –∑–∞–ø–∏—Å–∞–Ω")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ–±—â–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    if not db.exist_user(message.from_user.id):
        markup.add(item1, item2)
    else:
        markup.add(item1, item2)
        markup.add(item3, item4)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ —Ç–∞–±–ª–∏—Ü—ã")
def view_my_tables_handler(message):
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    owen_table = db.search_owen_table(message.from_user.id)
    if not owen_table:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–±–ª–∏—Ü")
    else:
        bot.send_message(message.chat.id, print_table(owen_table))


@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–¥–µ —è –∑–∞–ø–∏—Å–∞–Ω")
def view_my_registrations_handler(message):
    owen_participants = db.get_table_info_for_user(message.from_user.id)
    if not owen_participants:
        bot.send_message(message.chat.id, "–í—ã –ø–æ–∫–∞ –Ω–∏–≥–¥–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã.")
    else:
        bot.send_message(message.chat.id, print_table(owen_participants))


def print_table(id_tables: Union[int, List[int]]) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∞–±–ª–∏—Ü–µ/—Ç–∞–±–ª–∏—Ü–∞—Ö.

    Args:
        id_tables: ID —Ç–∞–±–ª–∏—Ü—ã (int) –∏–ª–∏ —Å–ø–∏—Å–æ–∫ ID —Ç–∞–±–ª–∏—Ü (List[int]).

    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∞–±–ª–∏—Ü–µ/—Ç–∞–±–ª–∏—Ü–∞—Ö, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫.
        –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É.
    """
    try:
        if isinstance(id_tables, int):
            id_tables = [id_tables]

        results = []
        for table_id in id_tables:
            # –ò–∑ id —Ç–∞–±–ª–∏—Ü –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –Ω–∏—Ö
            info_table = db.get_info_table(table_id)

            if not info_table:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ —Å ID {table_id}")
                continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

            name, description = info_table
            results.append(f"üìÉ *–ù–∞–∑–≤–∞–Ω–∏–µ –¢–∞–±–ª–∏—Ü—ã:* {name}\n"
                           f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
                           f"üÜî *ID:* /{table_id}\n")

        return "\n".join(results)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ print_table: {e}")
        return ""  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏


@bot.message_handler(func=lambda message: message.text.startswith('/') and message.text[1:].isdigit())
def handle_table_link(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, /12)."""
    try:
        table_id_str = message.text[1:] if message.text.startswith('/') else message.text
        table_id = int(table_id_str)

        table_name, table_description = db.get_info_table(table_id)

        if table_name:  # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            markup = types.InlineKeyboardMarkup()
            messages_to_send = []

            user_id = message.from_user.id

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü—É
            is_user_subscribed = db.check_user_in_table(table_id, user_id)
            if is_user_subscribed:
                item1 = types.InlineKeyboardButton("‚úÖ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"unsubscribe:{table_id}")
                messages_to_send.append("–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è.")
            else:
                item1 = types.InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"subscribe:{table_id}")
                messages_to_send.append("–í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É.")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Ç–∞–±–ª–∏—Ü—ã
            if db.is_user_owner(table_id, user_id):
                settings_button = types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                                                             callback_data=f"show_settings:{table_id}")
                markup.add(settings_button)

            markup.add(item1)

            table_info = print_table(table_id)  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ

            messages_to_send.insert(0, table_info)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            bot.send_message(message.chat.id, '\n'.join(messages_to_send),
                             reply_markup=markup, parse_mode="Markdown") #–í–∫–ª—é—á–∞–µ–º Markdown
        else:
            bot.reply_to(message, f"–¢–∞–±–ª–∏—Ü–∞ —Å ID {table_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    except ValueError:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö‚òπÔ∏è.\n–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12 –∏–ª–∏ /12).")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_table_link: {e}")
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
    try:
        if call.message:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            data = call.data.split(":")
            action = data[0]
            markup = types.InlineKeyboardMarkup()

            if action == "show_settings":
                show_settings(call)  # –í—ã–∑–æ–≤

            elif action == "unsubscribe":
                try:
                    table_id = int(data[1])
                except (IndexError, ValueError):
                    bot.send_message(call.message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–∞–±–ª–∏—Ü—ã (–æ—Ç–ø–∏—Å–∫–∞).")
                    return
                # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç —Ç–∞–±–ª–∏—Ü—ã
                if db.delete_user_from_table(table_id, call.from_user.id):
                    bot.send_message(call.message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ç–∞–±–ª–∏—Ü—ã —Å ID {table_id}")
                else:
                    bot.send_message(call.message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ç–∞–±–ª–∏—Ü—ã —Å ID {table_id}")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
                item1 = types.InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"subscribe:{table_id}")
                markup.add(item1)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text=call.message.text, reply_markup=markup)
                bot.answer_callback_query(call.id, "–û—Ç–ø–∏—Å–∞–Ω–æ!")

            elif action == "subscribe":
                try:
                    table_id = int(data[1])
                except (IndexError, ValueError):
                    bot.send_message(call.message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–∞–±–ª–∏—Ü—ã (–∑–∞–ø–∏—Å—å).")
                    return
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É
                if db.records_table(table_id, call.from_user.id):
                    bot.send_message(call.message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É —Å ID {table_id}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ-–ª–∏ —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ –∑–∞–ø–∏—Å–∏
                    if db.checking_for_notification(table_id):
                        notification_signed_user(id_table=table_id, id_user=call.from_user.id)
                else:
                    bot.send_message(call.message.chat.id, f"–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É —Å ID {table_id}")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–Ω–æ–ø–∫—É "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è"
                item1 = types.InlineKeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"unsubscribe:{table_id}")
                markup.add(item1)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text=call.message.text, reply_markup=markup)

                bot.answer_callback_query(call.id, "–ó–∞–ø–∏—Å–∞–Ω–æ!")

            elif action.startswith("setting_"):
                handle_setting(call)  # –í—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫

            elif action == "back_to_table":
                back_to_table(call)  # –í—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ callback_inline: {e}")
        bot.send_message(call.message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


# –£–¥–∞–ª–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é records_table, –æ–Ω–∞ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help'])
def help_command(message):
    bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                                      "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
                                      "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
                                      "/info - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")


@bot.message_handler(func=lambda message: message.text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ —Ç–∞–±–ª–∏—Ü—É")
def handle_create_table(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ id —Ç–∞–±–ª–∏—Ü—ã –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:")
    bot.register_next_step_handler(message, lambda message: handle_table_link(message))


@bot.message_handler(func=lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É")
def handle_create_table(message):
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã"
        user_data[message.chat.id] = {"state": "waiting_for_table_name"}

        markup = telebot.types.ReplyKeyboardMarkup(row_width=1)
        item1 = telebot.types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
        markup.add(item1)

        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã:", reply_markup=markup)
    except Exception as error:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π handle_table_description\n", error)


@bot.message_handler(
    func=lambda message: user_data.get(message.chat.id, {}).get("state") == "waiting_for_table_name")
def handle_table_name(message):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É
        user_data.pop(message.chat.id, None)
        send_welcome(message)
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    user_data[message.chat.id]["table_name"] = message.text
    user_data[message.chat.id]["state"] = "waiting_for_table_description"
    markup = telebot.types.ReplyKeyboardMarkup(row_width=1)
    item1 = telebot.types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
    markup.add(item1)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã:", reply_markup=markup)


@bot.message_handler(
    func=lambda message: user_data.get(message.chat.id, {}).get("state") == "waiting_for_table_description")
def handle_table_description(message):
    try:
        if message.text == "–û—Ç–º–µ–Ω–∞":
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É
            user_data.pop(message.chat.id, None)
            send_welcome(message)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        user_data[message.chat.id]["table_description"] = message.text

        # –í—ã–≤–æ–¥–∏–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        table_name = user_data[message.chat.id]["table_name"]
        table_description = user_data[message.chat.id]["table_description"]

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ—Ç.
        if not db.exist_user(message.from_user.id):
            db.records_user(id_platform=1, user_id=message.from_user.id, username=message.from_user.username,
                            user_name=message.from_user.first_name, user_surname=message.from_user.last_name)

        markup = types.InlineKeyboardMarkup()
        settings_button = types.InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="show_settings")
        show = types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ", callback_data="show_settings")
        markup.add(settings_button)
        markup.add(show)

        # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É
        id_table = db.create_table(table_name, table_description, id_owner=message.from_user.id)
        user_data[message.chat.id]["id_table"] = id_table

        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —Ç–∞–±–ª–∏—Ü–µ
        bot.send_message(message.chat.id, f"–¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞!"
                                          f"\n ID —Ç–∞–±–ª–∏—Ü—ã {id_table}"
                                          f"\n–ù–∞–∑–≤–∞–Ω–∏–µ: {table_name}"
                                          f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {table_description}", reply_markup=markup)

        # –ù–µ —É–¥–∞–ª—è–µ–º user_data, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤ show_settings
        # user_data.pop(message.chat.id, None)  # –£–±–µ—Ä–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
    except Exception as error:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π handle_table_description\n", error)


@bot.message_handler(commands=['show'])
def show_participants(message):
    try:
        try:
            table_id = int(str(message.text)[6:])  # [6:] –≤–º–µ—Å—Ç–æ [5:], —Ç.–∫. /show
            print(table_id, 'DF')
        except (ValueError, IndexError):
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /show <id_—Ç–∞–±–ª–∏—Ü—ã>")
            return

        user_id = message.from_user.id
        if not db.exist_user(user_id):
            bot.reply_to(message, "–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        else:
            if not db.exists_table(table_id):
                bot.reply_to(message, "–ù–µ—Ç —Ç–∞–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã")
            else:
                if not db.is_user_owner(table_id, user_id):
                    if not db.visibility(table_id):
                        bot.reply_to(message, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É.\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")

                list_participants = db.show_all_participants_table(table_id)

                if not list_participants:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É —Å–ø–∏—Å–∫–∞ —É–ø—Ä–æ—â–µ–Ω–∞
                    bot.reply_to(message, "–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.")
                else:
                    table_name = db.name_table(id_table=table_id)
                    header = "ID | –ò–º—è | –§–∞–º–∏–ª–∏—è | –õ–æ–≥–∏–Ω | –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞"
                    rows = [f"{num + 1}) {row[0]} | {row[1]} | {row[2]} | {row[3]} | {row[4]}" for num, row in
                            enumerate(list_participants)]
                    output = f"–¢–∞–±–ª–∏—Ü–∞ {table_name}\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{header}\n{chr(10).join(rows)}"
                    bot.reply_to(message, output)

    except Exception as error:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π show_participants\n", error)


@bot.message_handler(commands=['excel'])
def excel_table(message):
    """
       –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /excel –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel.
    """
    try:
        table_id = int(str(message.text)[6:])  # [6:] –≤–º–µ—Å—Ç–æ [5:], —Ç.–∫. /show
    except (ValueError, IndexError):
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /excel <id_—Ç–∞–±–ª–∏—Ü—ã>")
        return
    try:
        user_id = message.from_user.id
        if not db.exist_user(user_id):
            bot.reply_to(message, "–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        else:
            if not db.exists_table(table_id):
                bot.reply_to(message, "–ù–µ—Ç —Ç–∞–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã")
            else:
                if not db.is_user_owner(table_id, user_id):
                    bot.reply_to(message, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å excel —Ç–∞–±–ª–∏—Ü—ã.\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")

                list_participants = db.show_all_participants_table(table_id)

                if not list_participants[0]:
                    bot.reply_to(message, "–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.")
                else:
                    column_names = ['ID', '–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–õ–æ–≥–∏–Ω', '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞']
                    df = pd.DataFrame(list_participants, columns=column_names)

                    df.insert(0, '#', range(1, len(df) + 1))

                    file_name = f'{db.name_table(table_id)}.xlsx'
                    df.to_excel(file_name, index=False)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    with open(file_name, 'rb') as file:
                        bot.send_document(message.chat.id, file)

                    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
                    os.remove(file_name)

    except Exception as error:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π excel_table\n", error)


@bot.message_handler(
    func=lambda message: user_data.get(message.chat.id, {}).get("state") == "waiting_for_table_description")
def handle_table_description(message):
    try:
        if message.text == "–û—Ç–º–µ–Ω–∞":
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É
            user_data.pop(message.chat.id, None)
            send_welcome(message)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        user_data[message.chat.id]["table_description"] = message.text

        # –í—ã–≤–æ–¥–∏–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        table_name = user_data[message.chat.id]["table_name"]
        table_description = user_data[message.chat.id]["table_description"]

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ—Ç.
        if not db.exist_user(message.from_user.id):
            db.records_user(id_platform=1, user_id=message.from_user.id, username=message.from_user.username,
                            user_name=message.from_user.first_name, user_surname=message.from_user.last_name)

        markup = types.InlineKeyboardMarkup()
        settings_button = types.InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="show_settings")
        show = types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ", callback_data="show_settings")
        markup.add(settings_button)
        markup.add(show)

        # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É
        id_table = db.create_table(table_name, table_description, id_owner=message.from_user.id)
        user_data[message.chat.id]["id_table"] = id_table

        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —Ç–∞–±–ª–∏—Ü–µ
        bot.send_message(message.chat.id, f"–¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞! \n{print_table(int(id_table))}", reply_markup=markup)

    except Exception as error:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π handle_table_description\n", error)


@bot.callback_query_handler(func=lambda call: call.data.startswith("show_settings"))
def show_settings(call):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∞–±–ª–∏—Ü–µ."""
    try:
        table_id = int(call.data.split(":")[1]) #–ü–æ–ª—É—á–∞–µ–º table_id
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ
        table_name, table_description = db.get_info_table(table_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∞–±–ª–∏—Ü–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        output_message = (
            f"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã*\n"
            f"üÜî *ID:* /{table_id}\n"
            f"üìÉ *–ù–∞–∑–≤–∞–Ω–∏–µ:* {table_name}\n"
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {table_description}\n\n"
            "*–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:*" #–í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        )

        markup = types.InlineKeyboardMarkup(row_width=1)  # –ß—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ –±—ã–ª–∏ –≤ —Å—Ç–æ–ª–±–∏–∫

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        is_notification_enabled = db.checking_for_notification(table_id)

        # –¢–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        notification_text = "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if not is_notification_enabled else "üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"

        item_visibility = types.InlineKeyboardButton(
            "üëÅÔ∏è –í–∏–¥–∏–º–æ—Å—Ç—å: –£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ",
            callback_data=f"setting_2_{table_id}"
        )

        item_notifications = types.InlineKeyboardButton(
            notification_text,
            callback_data=f"setting_1_{table_id}"
        )

        item_back = types.InlineKeyboardButton(
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"back_to_table:{table_id}"
        )
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
        markup.add(item_visibility, item_notifications, item_back)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∞–±–ª–∏—Ü–µ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=output_message,
            reply_markup=markup,
            parse_mode="Markdown"
        )
        bot.answer_callback_query(call.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ show_settings: {e}")
        bot.send_message(call.message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        bot.answer_callback_query(call.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
@bot.callback_query_handler(func=lambda call: call.data.startswith("back_to_menu:"))
def handle_back_to_menu(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'."""
    try:
        user_id = int(call.data.split(":")[1])  # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ callback_data
        send_welcome(call.message)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é.")


@bot.callback_query_handler(func=lambda call: call.data.startswith("setting_"))
def handle_setting(call):
    try:
        data = call.data.split("_")
        if len(data) < 3:
            bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data")
            return

        setting_number = int(data[1])  # –ù–æ–º–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        table_id = data[2]  # ID —Ç–∞–±–ª–∏—Ü—ã

        if not table_id.isdigit():
            bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–∞–±–ª–∏—Ü—ã.")
            return

        table_id = int(table_id)
        name_table = db.name_table(table_id)  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã

        if setting_number == 1:
            if db.set_notification(id_table=table_id):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏—Ç–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–∏.
                if db.checking_for_notification(table_id):
                    bot.answer_callback_query(call.id, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {name_table} –≤–∫–ª—é—á–µ–Ω—ã.")
                else:
                    bot.answer_callback_query(call.id, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {name_table} –≤—ã–∫–ª—é—á–µ–Ω—ã.")
            else:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

        elif setting_number == 2:
            if db.change_show_participants(table_id):
                visibility_status = "–º–æ–≥—É—Ç" if db.visibility(table_id) else "–Ω–µ –º–æ–≥—É—Ç"
                bot.answer_callback_query(call.id, f"–¢–µ–ø–µ—Ä—å —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {name_table} {visibility_status} —Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.")
            else:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏.")
        else:
            bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        is_notification_enabled = db.checking_for_notification(table_id)
        is_visibility_enabled = db.visibility(table_id) # Assuming `visibility` returns True/False

        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
        visibility_text = "üëÄ –í–∏–¥–∏–º–æ—Å—Ç—å: " + ("‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if is_visibility_enabled else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞")
        notification_text = "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: " + ("‚úÖ –í–∫–ª—é—á–µ–Ω—ã" if is_notification_enabled else "‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã")

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
        markup = types.InlineKeyboardMarkup(row_width=1)
        item_visibility = types.InlineKeyboardButton(
            text=visibility_text,
            callback_data=f"setting_2_{table_id}"
        )
        item_notifications = types.InlineKeyboardButton(
            text=notification_text,
            callback_data=f"setting_1_{table_id}"
        )

        item_back = types.InlineKeyboardButton(
            text="‚¨Ö –ù–∞–∑–∞–¥",
            callback_data=f"back_to_table:{table_id}"
        )

        markup.add(item_visibility, item_notifications, item_back)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        bot.edit_message_reply_markup(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=markup
        )

    except Exception as error:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_setting: {error}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


def create_main_menu_markup(table_id):
    markup = types.InlineKeyboardMarkup()
    item1 = types.InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"subscribe:{table_id}")
    item2 = types.InlineKeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"unsubscribe:{table_id}")
    settings_button = types.InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=f"show_settings:{table_id}")
    markup.add(item1, item2)
    markup.add(settings_button)
    return markup


def display_table_info(message, table_id, user_id):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ –∏ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü—É
        is_user_subscribed = db.check_user_in_table(table_id, user_id)
        markup = types.InlineKeyboardMarkup(row_width=1)

        table_info = []
        table_info.append(print_table(table_id))

        table_info.append('\n–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É.')

        if is_user_subscribed:
            item1 = types.InlineKeyboardButton("‚úÖ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"unsubscribe:{table_id}")
            table_info.append('–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è')
        else:
            item1 = types.InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"subscribe:{table_id}")
            table_info.append('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è')

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        item2 = types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=f"show_settings:{table_id}")

        markup.add(item1, item2)

        output_message = ' '.join(table_info)  # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

        bot.edit_message_text(chat_id=message.chat.id,
                               message_id=message.message_id,
                               text=output_message,
                               reply_markup=markup,
                               parse_mode="Markdown")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ: {e}")
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith("back_to_table"))
def back_to_table(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –∫ —Ç–∞–±–ª–∏—Ü–µ'."""
    try:
        data = call.data.split(":")
        if len(data) > 1:
            table_id = int(data[1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–∞–±–ª–∏—Ü—ã
            user_id = call.from_user.id #–ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            print(f"–ü–æ–ª—É—á–µ–Ω table_id: {table_id}")
        else:
            bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–∞–±–ª–∏—Ü—ã.")
            return

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        display_table_info(call.message, table_id, user_id)

    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞ –≤ back_to_table (ValueError): {e}")
        bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–∞–±–ª–∏—Ü—ã.")
    except Exception as error:
        print(f"–û—à–∏–±–∫–∞ –≤ back_to_table: {error}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å "/" –∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º.


@bot.message_handler(commands=['random'])
def random_one_user_table(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /random –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Ç–∞–±–ª–∏—Ü—ã.
    """
    try:
        table_id = int(str(message.text)[8:])  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ [8:], —Ç–∞–∫ –∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞ /random
    except (ValueError, IndexError):
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /random <id_—Ç–∞–±–ª–∏—Ü—ã>")
        return

    try:
        user_id = message.from_user.id
        if not db.exist_user(user_id):
            bot.reply_to(message, "–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        else:
            if not db.exists_table(table_id):
                bot.reply_to(message, "–ù–µ—Ç —Ç–∞–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã")
            else:
                if not db.is_user_owner(table_id, user_id):
                    bot.reply_to(message, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —ç—Ç—É —Ç–∞–±–ª–∏—Ü—É.\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
                    return

                list_participants = db.select_rando_user(table_id)

                if list_participants is None:
                    bot.reply_to(message, "–í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
                else:
                    user_id, user_name, user_surname, username, platform_name = list_participants  # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∫–æ—Ä—Ç–µ–∂–∞

                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
                    output_string = (
                        f"–¢–∞–±–ª–∏—Ü–∞: {db.name_table(id_table=table_id)}\n"
                        f"–£—á–∞—Å—Ç–Ω–∏–∫:\n"
                        f"ID: {user_id}\n"
                        f"–ò–º—è: {user_name}\n"
                        f"–§–∞–º–∏–ª–∏—è: {user_surname if user_surname else '-'}\n"  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
                        f"–õ–æ–≥–∏–Ω: {username if username else '-'}\n"  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
                        f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform_name}"
                    )
                    bot.reply_to(message, output_string)

    except Exception as error:
        print(f"–û—à–∏–±–∫–∞ –≤ random_one_user_table: {error}")


def notification_signed_user(id_table, id_user):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É —Ç–∞–±–ª–∏—Ü—ã –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏, –≤–∫–ª—é—á–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    try:
        owner_id = db.get_id_owen_table(id_table)  # –ü–æ–ª—É—á–∞–µ–º ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ç–∞–±–ª–∏—Ü—ã
        if not owner_id:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ç–∞–±–ª–∏—Ü—ã —Å ID {id_table}")
            return  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –≤–ª–∞–¥–µ–ª—å—Ü–∞

        table_name = db.name_table(id_table=id_table)  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        data_user = db.get_info_user_id(id_user)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        if not data_user:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {id_user}")
            notification_text = (
                f"–í –≤–∞—à—É —Ç–∞–±–ª–∏—Ü—É \"{table_name}\" (ID: {id_table}) "
                f"–∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {id_user}). "
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."
            )
        else:
            user_name = data_user[0]
            user_surname = data_user[1] if data_user[1] else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"  # –§–∞–º–∏–ª–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å

            notification_text = (
                f"üéâ –í –≤–∞—à—É —Ç–∞–±–ª–∏—Ü—É \"{table_name}\" (ID: {id_table}) "
                f"–∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫!\n\n"
                f"üë§ –ò–º—è: {user_name}\n"
                f"üìù –§–∞–º–∏–ª–∏—è: {user_surname}\n"
                f"üÜî ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {id_user}"
            )

        bot.send_message(owner_id, notification_text)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

    except Exception as error:
        print(f"–û—à–∏–±–∫–∞ –≤ notification_signed_user: {error}")


@bot.message_handler(func=lambda message: message.text.startswith('/'))
def unknown_command(message):
    bot.reply_to(message, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
